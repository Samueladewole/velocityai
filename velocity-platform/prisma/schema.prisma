// ERIP Database Schema
// Comprehensive schema for all 8 components with risk appetite automation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  role         UserRole
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  riskRequests RiskClearanceRequest[]
  decisions    Decision[]
  assessments  Assessment[]
  
  @@map("users")
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  industry     String
  size         OrganizationSize
  subscription SubscriptionPlan
  
  // Risk Appetite Configuration
  riskAppetiteConfig RiskAppetiteConfig?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  users        User[]
  assessments  Assessment[]
  policies     Policy[]
  risks        Risk[]
  clearanceRequests RiskClearanceRequest[]
  
  @@map("organizations")
}

// Risk Appetite Automation (CLEARANCE)
model RiskAppetiteConfig {
  id             String @id @default(cuid())
  organizationId String @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Financial Thresholds
  maxAnnualLoss       Float  // Maximum acceptable annual loss
  lowRiskThreshold    Float  // Auto-approve threshold
  highRiskThreshold   Float  // Executive approval threshold
  criticalThreshold   Float  // Board approval threshold
  
  // Probability Thresholds
  maxProbabilityRare      Float @default(0.01)    // <1% annually
  maxProbabilityUnlikely  Float @default(0.05)    // 1-5% annually
  maxProbabilityPossible  Float @default(0.20)    // 5-20% annually
  maxProbabilityLikely    Float @default(0.50)    // >20% annually
  
  // Operational Limits
  maxDowntimeHours    Int
  maxDataBreach       Int    // Maximum records exposed
  maxRegulatoryFine   Float  // As percentage of revenue
  
  // AI Configuration
  enableAutomation    Boolean @default(true)
  aiModelTier         String  @default("standard")
  updateFrequency     String  @default("daily")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  lossScenarios    LossScenario[]
  crownJewels      CrownJewel[]
  keyRiskIndicators KeyRiskIndicator[]
  
  @@map("risk_appetite_configs")
}

model LossScenario {
  id           String @id @default(cuid())
  configId     String
  config       RiskAppetiteConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  name         String
  category     LossScenarioCategory
  description  String
  
  // AI-Generated Modeling
  automatedModeling Json  // AI analysis and scenario details
  businessImpact    Json  // Financial impact modeling
  probability       Json  // Probability distribution
  
  // Manual Overrides
  manualAdjustments Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("loss_scenarios")
}

model CrownJewel {
  id       String @id @default(cuid())
  configId String
  config   RiskAppetiteConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  name           String
  assetType      String
  criticality    CriticalityLevel
  businessValue  Float
  
  // Automated Discovery
  discoveredBy   String  // ATLAS, Manual, etc.
  dependencies   Json    // Service dependencies
  dataFlows      Json    // Critical data pathways
  
  // AI Prioritization
  aiPriorityScore     Float
  revenueImpact      Float
  complianceImpact   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("crown_jewels")
}

model KeyRiskIndicator {
  id       String @id @default(cuid())
  configId String
  config   RiskAppetiteConfig @relation(fields: [configId], references: [id], onDelete: Cascade)
  
  name           String
  category       String
  currentValue   Float
  threshold      Float
  unit           String
  
  status         KRIStatus
  trend          TrendDirection
  
  // Automated Monitoring
  dataSource     String    // PULSE, External, Manual
  updateFrequency String
  alertEnabled   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Historical Data
  measurements KRIMeasurement[]
  
  @@map("key_risk_indicators")
}

model KRIMeasurement {
  id    String @id @default(cuid())
  kriId String
  kri   KeyRiskIndicator @relation(fields: [kriId], references: [id], onDelete: Cascade)
  
  value     Float
  timestamp DateTime @default(now())
  source    String
  
  @@map("kri_measurements")
}

// Risk Clearance System
model RiskClearanceRequest {
  id             String @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requesterId    String
  requester      User @relation(fields: [requesterId], references: [id])
  
  title          String
  description    String
  riskType       RiskCategory
  
  // AI Risk Quantification
  financialImpact      Float
  probabilityScore     Float
  riskScore           Float
  opportunityValue    Float?
  
  // Approval Routing
  approvalLevel       ApprovalLevel
  currentStatus       RequestStatus
  daysOpen           Int @default(0)
  
  // AI Analysis
  appetiteAssessment  Json  // Appetite alignment analysis
  aiRecommendation   Json  // AI-generated recommendations
  businessContext    Json  // Risk vs opportunity analysis
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  decisions     Decision[]
  approvals     Approval[]
  
  @@map("risk_clearance_requests")
}

model Decision {
  id        String @id @default(cuid())
  requestId String
  request   RiskClearanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  deciderId String
  decider   User @relation(fields: [deciderId], references: [id])
  
  decisionType DecisionType
  rationale    String
  conditions   Json?  // Any conditions or requirements
  
  // Outcome Tracking
  outcomeTracking Json?
  effectivenessScore Float?
  
  decidedAt DateTime @default(now())
  
  @@map("decisions")
}

model Approval {
  id        String @id @default(cuid())
  requestId String
  request   RiskClearanceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  approverRole String
  status       ApprovalStatus
  comments     String?
  approvedAt   DateTime?
  
  @@map("approvals")
}

// COMPASS - Regulatory Intelligence
model Regulation {
  id           String @id @default(cuid())
  title        String
  body         String
  jurisdiction String
  effectiveDate DateTime
  
  // AI Analysis
  aiAnalysis   Json  // Claude analysis results
  requirements Requirement[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("regulations")
}

model Requirement {
  id           String @id @default(cuid())
  regulationId String
  regulation   Regulation @relation(fields: [regulationId], references: [id], onDelete: Cascade)
  
  description  String
  category     String
  priority     Priority
  
  // Implementation
  frameworks   FrameworkMapping[]
  
  @@map("requirements")
}

model ComplianceFramework {
  id       String @id @default(cuid())
  name     String
  version  String
  
  controls FrameworkControl[]
  mappings FrameworkMapping[]
  
  @@map("compliance_frameworks")
}

model FrameworkControl {
  id          String @id @default(cuid())
  frameworkId String
  framework   ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  
  controlId   String
  title       String
  description String
  category    String
  
  @@map("framework_controls")
}

model FrameworkMapping {
  id            String @id @default(cuid())
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)
  frameworkId   String
  framework     ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  
  controlId     String
  mappingType   String
  
  @@map("framework_mappings")
}

// ATLAS - Security Assessment
model Assessment {
  id             String @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  conductedById  String
  conductedBy    User @relation(fields: [conductedById], references: [id])
  
  type           AssessmentType
  status         AssessmentStatus
  riskScore      Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  findings      Finding[]
  recommendations Recommendation[]
  
  @@map("assessments")
}

model Finding {
  id           String @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  severity     Severity
  category     String
  description  String
  technicalDetails Json
  businessImpact   String
  
  // AI Classification
  aiClassification Json?  // SecBERT results
  
  remediation  Remediation?
  
  @@map("findings")
}

model Remediation {
  id        String @id @default(cuid())
  findingId String @unique
  finding   Finding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  
  strategy     String
  timeline     String
  cost         Float?
  priority     Priority
  
  // AI Recommendations
  aiGenerated  Json?  // Claude-generated remediation plan
  
  @@map("remediations")
}

model Recommendation {
  id           String @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  title        String
  description  String
  priority     Priority
  effort       String
  impact       String
  
  @@map("recommendations")
}

// PRISM - Risk Quantification (Results from Python backend)
model Risk {
  id             String @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  name         String
  category     RiskCategory
  severity     Severity
  likelihood   Likelihood
  
  // Financial Quantification
  annualLossExpectancy Float?
  singleLossExpectancy Float?
  
  // Monte Carlo Results
  monteCarloResults Json?  // Results from Python backend
  
  status    RiskStatus
  ownerId   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("risks")
}

// CIPHER - Policy Management
model Policy {
  id             String @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  name           String
  version        String
  content        String
  type           PolicyType
  status         PolicyStatus
  
  // AI Generation
  aiGenerated    Boolean @default(false)
  generationPrompt String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  deployments PolicyDeployment[]
  
  @@map("policies")
}

model PolicyDeployment {
  id         String @id @default(cuid())
  policyId   String
  policy     Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  environment String
  status      DeploymentStatus
  deployedAt  DateTime?
  
  @@map("policy_deployments")
}

// PULSE - Monitoring Data (Time-series data in separate system)
model MonitoringEvent {
  id        String @id @default(cuid())
  timestamp DateTime @default(now())
  source    String
  type      String
  data      Json
  severity  Severity
  processed Boolean @default(false)
  
  @@map("monitoring_events")
}

model Alert {
  id          String @id @default(cuid())
  triggeredAt DateTime @default(now())
  type        AlertType
  severity    Severity
  title       String
  description String
  context     Json
  
  status      AlertStatus @default(OPEN)
  assignedTo  String?
  resolvedAt  DateTime?
  
  @@map("alerts")
}

// Enums
enum UserRole {
  ADMIN
  CISO
  COMPLIANCE_MANAGER
  SECURITY_ARCHITECT
  EXECUTIVE
  AUDITOR
  USER
}

enum OrganizationSize {
  STARTUP
  SME
  ENTERPRISE
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum LossScenarioCategory {
  RANSOMWARE
  DATA_BREACH
  SYSTEM_OUTAGE
  SUPPLY_CHAIN
  REGULATORY_FINE
  BUSINESS_DISRUPTION
}

enum CriticalityLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum KRIStatus {
  NORMAL
  WARNING
  ALERT
  CRITICAL
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
}

enum RiskCategory {
  SECURITY
  COMPLIANCE
  OPERATIONAL
  FINANCIAL
  STRATEGIC
  REPUTATIONAL
}

enum ApprovalLevel {
  AUTO_APPROVED
  MANAGER
  DIRECTOR
  EXECUTIVE
  BOARD
}

enum RequestStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  ESCALATED
}

enum DecisionType {
  APPROVE
  REJECT
  APPROVE_WITH_CONDITIONS
  ESCALATE
  REQUEST_MORE_INFO
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum AssessmentType {
  SECURITY
  COMPLIANCE
  RISK
  THIRD_PARTY
}

enum AssessmentStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum Likelihood {
  ALMOST_CERTAIN
  LIKELY
  POSSIBLE
  UNLIKELY
  RARE
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATING
  MONITORING
  CLOSED
}

enum PolicyType {
  SECURITY
  PRIVACY
  COMPLIANCE
  OPERATIONAL
  TECHNICAL
}

enum PolicyStatus {
  DRAFT
  REVIEW
  APPROVED
  ACTIVE
  DEPRECATED
}

enum DeploymentStatus {
  PENDING
  DEPLOYED
  FAILED
  ROLLED_BACK
}

enum AlertType {
  RISK_THRESHOLD
  COMPLIANCE_DRIFT
  SECURITY_INCIDENT
  SYSTEM_ANOMALY
  REGULATORY_CHANGE
}

enum AlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}