import React, { useState, useEffect } from 'react';
import { ComponentPageTemplate, StatCard, TabConfiguration } from '@/components/templates/ComponentPageTemplate';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield,
  Search,
  FileText,
  AlertTriangle,
  CheckCircle,
  Clock,
  Users,
  Database,
  Eye,
  Download,
  Upload,
  Settings,
  Zap,
  Activity,
  BarChart3,
  Globe,
  Lock,
  UserX,
  FileCheck,
  Scan,
  RefreshCw,
  Plus,
  Edit3,
  Trash2,
  ExternalLink,
  Calendar,
  Target
} from 'lucide-react';

interface ShadowITApp {
  id: string;
  name: string;
  category: string;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  dataTypes: string[];
  users: number;
  lastSeen: string;
  compliance: {
    gdpr: boolean;
    soc2: boolean;
    iso27001: boolean;
  };
  trustImpact: number;
}

interface DSARRequest {
  id: string;
  requestType: 'access' | 'portability' | 'deletion' | 'rectification' | 'restriction';
  requesterEmail: string;
  submissionDate: string;
  dueDate: string;
  status: 'pending' | 'processing' | 'completed' | 'overdue';
  dataSubjects: string[];
  estimatedRecords: number;
  trustPoints: number;
}

interface RoPARecord {
  id: string;
  processingActivity: string;
  purpose: string[];
  dataCategories: string[];
  dataSubjects: string[];
  recipients: string[];
  retentionPeriod: string;
  legalBasis: string;
  riskAssessment: 'low' | 'medium' | 'high';
  lastReviewed: string;
  status: 'compliant' | 'needs_review' | 'non_compliant';
}

interface DPIAAssessment {
  id: string;
  projectName: string;
  assessmentType: 'mandatory' | 'voluntary';
  riskLevel: 'low' | 'medium' | 'high';
  status: 'draft' | 'review' | 'approved' | 'rejected';
  createdDate: string;
  completionPercentage: number;
  risks: {
    category: string;
    likelihood: number;
    impact: number;
    mitigation: string;
  }[];
  trustEquityImpact: number;
}

export const PrivacyManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState('shadow-it');
  const [scanning, setScanning] = useState(false);
  const [lastScan, setLastScan] = useState('2025-01-23 14:30');

  // Sample data
  const shadowITApps: ShadowITApp[] = [
    {
      id: 'app-1',
      name: 'Notion',
      category: 'Productivity',
      riskLevel: 'medium',
      dataTypes: ['Personal Data', 'Business Data', 'IP'],
      users: 23,
      lastSeen: '2025-01-23',
      compliance: { gdpr: true, soc2: true, iso27001: false },
      trustImpact: -15
    },
    {
      id: 'app-2',
      name: 'Figma',
      category: 'Design',
      riskLevel: 'low',
      dataTypes: ['Business Data', 'IP'],
      users: 12,
      lastSeen: '2025-01-23',
      compliance: { gdpr: true, soc2: true, iso27001: true },
      trustImpact: -5
    },
    {
      id: 'app-3',
      name: 'Unverified SaaS Tool',
      category: 'Unknown',
      riskLevel: 'critical',
      dataTypes: ['Personal Data', 'Financial Data'],
      users: 5,
      lastSeen: '2025-01-22',
      compliance: { gdpr: false, soc2: false, iso27001: false },
      trustImpact: -50
    }
  ];

  const dsarRequests: DSARRequest[] = [
    {
      id: 'dsar-1',
      requestType: 'access',
      requesterEmail: 'john.doe@example.com',
      submissionDate: '2025-01-20',
      dueDate: '2025-02-19',
      status: 'processing',
      dataSubjects: ['john.doe@example.com'],
      estimatedRecords: 1247,
      trustPoints: 25
    },
    {
      id: 'dsar-2',
      requestType: 'deletion',
      requesterEmail: 'jane.smith@oldcompany.com',
      submissionDate: '2025-01-18',
      dueDate: '2025-02-17',
      status: 'completed',
      dataSubjects: ['jane.smith@oldcompany.com'],
      estimatedRecords: 89,
      trustPoints: 50
    },
    {
      id: 'dsar-3',
      requestType: 'portability',
      requesterEmail: 'user@domain.com',
      submissionDate: '2025-01-10',
      dueDate: '2025-02-09',
      status: 'overdue',
      dataSubjects: ['user@domain.com'],
      estimatedRecords: 2156,
      trustPoints: 0
    }
  ];

  const ropaRecords: RoPARecord[] = [
    {
      id: 'ropa-1',
      processingActivity: 'Customer Relationship Management',
      purpose: ['Contract Performance', 'Customer Service'],
      dataCategories: ['Contact Information', 'Transaction History'],
      dataSubjects: ['Customers', 'Prospects'],
      recipients: ['Sales Team', 'Support Team', 'Marketing'],
      retentionPeriod: '7 years after contract end',
      legalBasis: 'Contract Performance (Art. 6(1)(b))',
      riskAssessment: 'medium',
      lastReviewed: '2025-01-15',
      status: 'compliant'
    },
    {
      id: 'ropa-2',
      processingActivity: 'Employee Data Management',
      purpose: ['Employment Contract', 'Payroll', 'HR Management'],
      dataCategories: ['Personal Details', 'Employment Records', 'Performance Data'],
      dataSubjects: ['Employees', 'Job Applicants'],
      recipients: ['HR Team', 'Payroll Provider', 'Management'],
      retentionPeriod: '10 years after employment end',
      legalBasis: 'Contract Performance (Art. 6(1)(b))',
      riskAssessment: 'high',
      lastReviewed: '2025-01-10',
      status: 'needs_review'
    }
  ];

  const dpiaAssessments: DPIAAssessment[] = [
    {
      id: 'dpia-1',
      projectName: 'Customer Behavior Analytics Platform',
      assessmentType: 'mandatory',
      riskLevel: 'high',
      status: 'review',
      createdDate: '2025-01-15',
      completionPercentage: 75,
      risks: [
        {
          category: 'Data Subject Rights',
          likelihood: 3,
          impact: 4,
          mitigation: 'Implement automated consent management and right to erasure'
        },
        {
          category: 'Data Security',
          likelihood: 2,
          impact: 5,
          mitigation: 'End-to-end encryption and access controls'
        }
      ],
      trustEquityImpact: 120
    },
    {
      id: 'dpia-2',
      projectName: 'AI-Powered Recruitment Tool',
      assessmentType: 'mandatory',
      riskLevel: 'high',
      status: 'approved',
      createdDate: '2025-01-08',
      completionPercentage: 100,
      risks: [
        {
          category: 'Algorithmic Bias',
          likelihood: 4,
          impact: 4,
          mitigation: 'Regular bias testing and diverse training data'
        }
      ],
      trustEquityImpact: 200
    }
  ];

  const runShadowITScan = async () => {
    setScanning(true);
    // Simulate scanning process
    setTimeout(() => {
      setScanning(false);
      setLastScan(new Date().toLocaleString());
    }, 3000);
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
      case 'approved':
      case 'compliant':
        return 'text-green-600 bg-green-50';
      case 'processing':
      case 'review':
      case 'needs_review':
        return 'text-blue-600 bg-blue-50';
      case 'overdue':
      case 'rejected':
      case 'non_compliant':
        return 'text-red-600 bg-red-50';
      default:
        return 'text-gray-600 bg-gray-50';
    }
  };

  // Quick stats for the header
  const highRiskApps = shadowITApps.filter(app => app.riskLevel === 'critical' || app.riskLevel === 'high').length;
  const overdueRequests = dsarRequests.filter(req => req.status === 'overdue').length;
  const compliantRecords = ropaRecords.filter(record => record.status === 'compliant').length;
  const approvedDPIAs = dpiaAssessments.filter(dpia => dpia.status === 'approved').length;

  const quickStats: StatCard[] = [
    {
      label: 'Shadow IT Apps',
      value: shadowITApps.length,
      change: `+€{highRiskApps}`,
      trend: highRiskApps > 0 ? 'down' : 'up',
      icon: <Search className="h-6 w-6 text-blue-600" />,
      description: `€{highRiskApps} high risk`,
      color: 'text-blue-600'
    },
    {
      label: 'DSAR Requests',
      value: dsarRequests.length,
      change: `€{overdueRequests}`,
      trend: overdueRequests > 0 ? 'down' : 'up',
      icon: <UserX className="h-6 w-6 text-green-600" />,
      description: `€{overdueRequests} overdue`,
      color: 'text-green-600'
    },
    {
      label: 'RoPA Records',
      value: ropaRecords.length,
      change: `+€{compliantRecords}`,
      trend: 'up',
      icon: <Database className="h-6 w-6 text-purple-600" />,
      description: `€{compliantRecords} compliant`,
      color: 'text-purple-600'
    },
    {
      label: 'DPIAs Active',
      value: dpiaAssessments.length,
      change: `+€{approvedDPIAs}`,
      trend: 'up',
      icon: <FileCheck className="h-6 w-6 text-orange-600" />,
      description: `€{approvedDPIAs} approved`,
      color: 'text-orange-600'
    }
  ];

  // Tab configurations
  const tabs: TabConfiguration[] = [
    {
      id: 'shadow-it',
      label: 'Shadow IT Discovery',
      badge: shadowITApps.length,
      content: (

        <div className="space-y-6">
            <Card className="card-professional">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Search className="h-5 w-5 text-blue-600" />
                    Shadow IT Discovery
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-slate-600">Last scan: {lastScan}</span>
                    <Button 
                      onClick={runShadowITScan} 
                      disabled={scanning}
                      className="erip-gradient-primary"
                    >
                      {scanning ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Scan className="h-4 w-4 mr-2" />
                      )}
                      {scanning ? 'Scanning...' : 'Run Scan'}
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {shadowITApps.map((app) => (
                    <div key={app.id} className="flex items-center justify-between p-4 border border-slate-200 rounded-lg">
                      <div className="flex items-start gap-4">
                        <div className="w-12 h-12 bg-slate-100 rounded-lg flex items-center justify-center">
                          <Globe className="h-6 w-6 text-slate-600" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-slate-900 mb-1">{app.name}</h4>
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={getRiskColor(app.riskLevel)}>
                              {app.riskLevel.toUpperCase()}
                            </Badge>
                            <span className="text-sm text-slate-600">{app.category}</span>
                            <span className="text-xs text-slate-500">•</span>
                            <span className="text-sm text-slate-600">{app.users} users</span>
                          </div>
                          <div className="flex items-center gap-1 mb-2">
                            {app.dataTypes.map((type) => (
                              <Badge key={type} variant="outline" className="text-xs">
                                {type}
                              </Badge>
                            ))}
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-xs text-slate-600">Compliance:</span>
                            <div className="flex items-center gap-1">
                              <Badge className={app.compliance.gdpr ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}>
                                GDPR
                              </Badge>
                              <Badge className={app.compliance.soc2 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}>
                                SOC2
                              </Badge>
                              <Badge className={app.compliance.iso27001 ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}>
                                ISO27001
                              </Badge>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`text-sm font-medium €{app.trustImpact < 0 ? 'text-red-600' : 'text-green-600'}`}>
                          {app.trustImpact > 0 ? '+' : ''}{app.trustImpact} Trust Points
                        </div>
                        <div className="flex items-center gap-2 mt-2">
                          <Button size="sm" variant="outline">
                            <Eye className="h-4 w-4 mr-1" />
                            Review
                          </Button>
                          <Button size="sm" variant="outline">
                            <Shield className="h-4 w-4 mr-1" />
                            Approve
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <Alert className="mt-6">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    {shadowITApps.filter(app => app.riskLevel === 'critical' || app.riskLevel === 'high').length} high-risk applications detected. 
                    Review compliance status and implement access controls to improve Trust Score.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </div>
        </div>
      )
    },
    {
      id: 'dsar',
      label: 'DSAR Automation',
      badge: dsarRequests.length,
      content: (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Data Subject Access Requests</h3>
              <Button className="erip-gradient-primary">
                <Plus className="h-4 w-4 mr-2" />
                New DSAR
              </Button>
            </div>

            <div className="grid gap-4">
              {dsarRequests.map((request) => (
                <Card key={request.id} className="card-professional">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <Badge className={getStatusColor(request.status)}>
                            {request.status.replace('_', ' ').toUpperCase()}
                          </Badge>
                          <Badge variant="outline">
                            {request.requestType.toUpperCase()}
                          </Badge>
                        </div>
                        <h4 className="font-medium text-slate-900 mb-2">
                          {request.requesterEmail}
                        </h4>
                        <div className="grid grid-cols-2 gap-4 text-sm text-slate-600">
                          <div>
                            <span className="font-medium">Submitted:</span> {request.submissionDate}
                          </div>
                          <div>
                            <span className="font-medium">Due:</span> {request.dueDate}
                          </div>
                          <div>
                            <span className="font-medium">Records:</span> {request.estimatedRecords.toLocaleString()}
                          </div>
                          <div>
                            <span className="font-medium">Trust Points:</span> +{request.trustPoints}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button size="sm" variant="outline">
                          <Eye className="h-4 w-4 mr-1" />
                          Review
                        </Button>
                        <Button size="sm" variant="outline">
                          <Download className="h-4 w-4 mr-1" />
                          Export
                        </Button>
                        {request.status === 'processing' && (
                          <Button size="sm" className="erip-gradient-primary">
                            <CheckCircle className="h-4 w-4 mr-1" />
                            Complete
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <Alert>
              <Clock className="h-4 w-4" />
              <AlertDescription>
                DSAR automation has processed {dsarRequests.filter(req => req.status === 'completed').length} requests this month, 
                earning {dsarRequests.reduce((sum, req) => sum + req.trustPoints, 0)} Trust Points.
              </AlertDescription>
            </Alert>
          </div>
        </div>
      )
    },
    {
      id: 'ropa',
      label: 'RoPA Management',
      badge: ropaRecords.length,
      content: (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Records of Processing Activities</h3>
              <Button className="erip-gradient-primary">
                <Plus className="h-4 w-4 mr-2" />
                New RoPA Record
              </Button>
            </div>

            <div className="grid gap-4">
              {ropaRecords.map((record) => (
                <Card key={record.id} className="card-professional">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={getStatusColor(record.status)}>
                              {record.status.replace('_', ' ').toUpperCase()}
                            </Badge>
                            <Badge className={getRiskColor(record.riskAssessment)}>
                              {record.riskAssessment.toUpperCase()} RISK
                            </Badge>
                          </div>
                          <h4 className="font-medium text-slate-900 mb-2">
                            {record.processingActivity}
                          </h4>
                          <div className="text-sm text-slate-600 mb-3">
                            <strong>Legal Basis:</strong> {record.legalBasis}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button size="sm" variant="outline">
                            <Edit3 className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                          <Button size="sm" variant="outline">
                            <Download className="h-4 w-4 mr-1" />
                            Export
                          </Button>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h5 className="text-sm font-medium text-slate-700 mb-1">Purposes</h5>
                          <div className="flex flex-wrap gap-1">
                            {record.purpose.map((p) => (
                              <Badge key={p} variant="outline" className="text-xs">
                                {p}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-slate-700 mb-1">Data Categories</h5>
                          <div className="flex flex-wrap gap-1">
                            {record.dataCategories.map((cat) => (
                              <Badge key={cat} variant="outline" className="text-xs">
                                {cat}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-slate-700 mb-1">Data Subjects</h5>
                          <div className="flex flex-wrap gap-1">
                            {record.dataSubjects.map((sub) => (
                              <Badge key={sub} variant="outline" className="text-xs">
                                {sub}
                              </Badge>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h5 className="text-sm font-medium text-slate-700 mb-1">Recipients</h5>
                          <div className="flex flex-wrap gap-1">
                            {record.recipients.map((rec) => (
                              <Badge key={rec} variant="outline" className="text-xs">
                                {rec}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>

                      <div className="flex items-center justify-between text-sm text-slate-600 pt-2 border-t border-slate-200">
                        <span><strong>Retention:</strong> {record.retentionPeriod}</span>
                        <span><strong>Last Reviewed:</strong> {record.lastReviewed}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </div>
      )
    },
    {
      id: 'dpia',
      label: 'DPIA Tools',
      badge: dpiaAssessments.length,
      content: (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Data Protection Impact Assessments</h3>
              <Button className="erip-gradient-primary">
                <Plus className="h-4 w-4 mr-2" />
                New DPIA
              </Button>
            </div>

            <div className="grid gap-4">
              {dpiaAssessments.map((dpia) => (
                <Card key={dpia.id} className="card-professional">
                  <CardContent className="p-6">
                    <div className="space-y-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={getStatusColor(dpia.status)}>
                              {dpia.status.toUpperCase()}
                            </Badge>
                            <Badge className={getRiskColor(dpia.riskLevel)}>
                              {dpia.riskLevel.toUpperCase()} RISK
                            </Badge>
                            <Badge variant="outline">
                              {dpia.assessmentType.toUpperCase()}
                            </Badge>
                          </div>
                          <h4 className="font-medium text-slate-900 mb-2">
                            {dpia.projectName}
                          </h4>
                          <div className="flex items-center gap-4 text-sm text-slate-600 mb-3">
                            <span>Created: {dpia.createdDate}</span>
                            <span>Trust Impact: +{dpia.trustEquityImpact} points</span>
                          </div>
                          <div className="flex items-center gap-2 mb-3">
                            <span className="text-sm text-slate-600">Progress:</span>
                            <Progress value={dpia.completionPercentage} className="flex-1 h-2" />
                            <span className="text-sm font-medium">{dpia.completionPercentage}%</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button size="sm" variant="outline">
                            <Edit3 className="h-4 w-4 mr-1" />
                            Edit
                          </Button>
                          <Button size="sm" variant="outline">
                            <Download className="h-4 w-4 mr-1" />
                            Export
                          </Button>
                        </div>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-slate-700 mb-2">Risk Assessment</h5>
                        <div className="space-y-2">
                          {dpia.risks.map((risk, index) => (
                            <div key={index} className="p-3 bg-slate-50 rounded-lg">
                              <div className="flex items-center justify-between mb-1">
                                <span className="text-sm font-medium">{risk.category}</span>
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">
                                    L: {risk.likelihood}
                                  </Badge>
                                  <Badge variant="outline" className="text-xs">
                                    I: {risk.impact}
                                  </Badge>
                                </div>
                              </div>
                              <p className="text-xs text-slate-600">{risk.mitigation}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <Alert>
              <Target className="h-4 w-4" />
              <AlertDescription>
                Completed DPIAs earn significant Trust Equity points. Each approved assessment demonstrates 
                proactive privacy protection and regulatory compliance.
              </AlertDescription>
            </Alert>
          </div>
        </div>
      )
    }
  ];

  const headerActions = (
    <>
      <Button variant="outline" onClick={startScan} disabled={scanning}>
        {scanning ? (
          <>
            <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            Scanning...
          </>
        ) : (
          <>
            <Scan className="h-4 w-4 mr-2" />
            Scan Shadow IT
          </>
        )}
      </Button>
      <Button className="bg-gradient-to-r from-green-600 to-blue-600">
        <Download className="h-4 w-4 mr-2" />
        Export Compliance Report
      </Button>
    </>
  );

  return (
    <ComponentPageTemplate
      title="Privacy Management Suite"
      subtitle="Comprehensive GDPR & Privacy Compliance"
      description="Advanced privacy tools including Shadow IT discovery, DSAR automation, RoPA management, and DPIA assessments for complete regulatory compliance."
      trustScore={96}
      trustPoints={4250}
      quickStats={quickStats}
      tabs={tabs}
      actions={headerActions}
      headerGradient="from-green-50 to-blue-50"
      className="card-professional"
    />
  );
};